{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","index","key","SearchBox","type","placeholder","onChange","handleChange","App","event","console","log","target","value","setState","searchField","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAIaA,G,MAAO,SAACC,GAEpB,OACC,yBAAKC,UAAU,kBACd,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCLRC,G,MAAW,SAACR,GAExB,OACC,yBAAKC,UAAU,aAEbD,EAAMS,SAASC,KAAI,SAACN,EAASO,GAC5B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAOP,QAASA,UCR1BS,G,MAAY,SAACb,GACzB,OACC,2BACCC,UAAU,SACVa,KAAK,SACLC,YAAaf,EAAMe,YACnBC,SAAUhB,EAAMiB,iB,sQCqCJC,E,uNAxCb,aAAe,IAAD,8BACZ,gBAcFD,aAAe,SAACE,GACdC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAACC,YAAaN,EAAMG,OAAOC,QAAQ,kBAAMH,QAAQC,IAAI,EAAKK,MAAMD,iBAd9E,EAAKC,MAAQ,CACXjB,SAAU,GACVgB,YAAa,IALH,E,gEASO,IAAD,OAClBE,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAACf,SAAUsB,S,+BASlC,IAAD,EACyBC,KAAKN,MAA9BjB,EADA,EACAA,SAAUgB,EADV,EACUA,YACXQ,EAAmBxB,EAASyB,QAAO,SAAC9B,GACxC,OAAOA,EAAQE,KAAK6B,cAAcC,SAASX,EAAYU,kBAGzD,OACI,yBAAKlC,UAAU,OACb,gDACA,kBAAC,EAAD,CACEc,YAAY,kBACZE,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUR,SAAUwB,S,GAnCXI,aCOCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.0aa0c7db.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n\r\n\treturn (\r\n\t\t<div className='card-container'>\r\n\t\t\t<img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n\t\t\t<h2>{props.monster.name}</h2>\r\n\t\t\t<p>{props.monster.email}</p>\r\n\t\t</div>\r\n\t)\r\n};","import React from 'react';\r\nimport {Card} from \"../card/card.component\";\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => {\r\n\r\n\treturn (\r\n\t\t<div className='card-list'>\r\n\t\t\t{\r\n\t\t\t\tprops.monsters.map((monster, index) => {\r\n\t\t\t\t\treturn <Card key={index} monster={monster}/>\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n};","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = (props) => {\r\n\treturn (\r\n\t\t<input\r\n\t\t\tclassName='search'\r\n\t\t\ttype='search'\r\n\t\t\tplaceholder={props.placeholder}\r\n\t\t\tonChange={props.handleChange}\r\n\t\t/>\r\n\t)\r\n};","import React, {Component} from 'react';\r\nimport {CardList} from \"./components/card-list/card-list.component\";\r\nimport {SearchBox} from \"./components/search-box/search-box.component\";\r\nimport './App.css';\r\n\r\nclass App extends  Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({monsters: users}))\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    console.log(event.target.value);\r\n    this.setState({searchField: event.target.value}, () => console.log(this.state.searchField));\r\n    // console.log(this.state.searchField);\r\n  };\r\n\r\n  render() {\r\n    const {monsters, searchField} = this.state;\r\n    const filteredMonsters = monsters.filter((monster) => {\r\n      return monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n    });\r\n\r\n    return (\r\n        <div className='App'>\r\n          <h1>Monsters Rolodex</h1>\r\n          <SearchBox\r\n            placeholder='search monsters'\r\n            handleChange={this.handleChange}\r\n          />\r\n          <CardList monsters={filteredMonsters}/>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}